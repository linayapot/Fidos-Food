import {
  createBrowserRouter,
  RouterProvider,
  Form,
  useLoaderData,
  redirect
} from "react-router-dom";
import logo from '../logo.svg';
import '../App.css';
import localforage from "localforage";
import {unitconv, units} from "../math.js";
import {useState} from "react";

async function dietinfo_form_callback({ request, params }) {
  const formData = await request.formData();
  const formDataObj = {};
  formData.forEach((value, key) => formDataObj[key] = value);
  formDataObj.amountAF =unitconv(formDataObj.amountAF,formDataObj.unit)
  localforage.setItem("diet", formDataObj)
  return redirect(`/P4Results`);
}

//to allow decimal places into form


// function P3YourFoodInfo() {
export default function P3YourFoodInfo() {
    // use for page 4 const contacts  = useLoaderData();
    //https://www.youtube.com/watch?v=XtS14dXwvwE;

    //const [selectedNutrient, setSelectedNutrient] = useState([] );
    //const [inputValue, setInputValue] =useState([] );
    const [rows, setRows] = useState([{ nutrient: '', value: '' }]);
    const [selectedNutrients, setSelectedNutrients] = useState([]);

    // const handleNutrientChange = (e) => {
    //   console.log(e.target);
    //   setNutrientList([...nutrientList, { name: "event.target.value" }]);
    // };
  
    // const handleNutrientRemove = (index) => {
    //   const list = [...nutrientList];
    //   list.splice(index, 1);
    //   setNutrientList(list);
    // };

    // const handleAddRow = (event) => {
    //   setNutrientList([...nutrientList, { name: ''}]);
    //   //setSelectedValue(event.target.value)
    // };

    // const printTest = (event) => {
    //   setNutrientList(event.target.value)
    //   //setSelectedValue(event.target.value)
    // };
  
    // const handleNutrientAdd = () => {
    //   setNutrientList([...nutrientList, { nutrient: "" }]);
    // };
    
    // const NutrientSelector = () => {
      // const [selectedNutrient, setSelectedNutrient] = useState('');
      // const [inputValue, setInputValue] = useState('');}
    
      const handleNutrientChange = (index, event) => {
        const updatedRows = [...rows];
        updatedRows[index].nutrient = event.target.value;
        setRows(updatedRows);

        const selected = event.target.value;
        if (!selectedNutrients.includes(selected)) {
          setSelectedNutrients([...selectedNutrients, selected]);
        }
      };
    
      const handleInputChange = (index, event) => {
        const updatedRows = [...rows];
        updatedRows[index].value = event.target.value;
        setRows(updatedRows);
      };
    
      const addRow = () => {
        setRows([...rows, { nutrient: '', value: '' }]);
      };
    
      const removeRow = (index) => {
        const updatedRows = [...rows];
        updatedRows.splice(index, 1);
        setRows(updatedRows);
        
    const removedNutrient = rows[index].nutrient;
    setSelectedNutrients(selectedNutrients.filter(nutrient => nutrient !== removedNutrient));
      };
    

    return (
    <div className="App">
      <img src={logo} className="App-logo" alt="logo" />
      <div className="first-header">
        Enter The Diet Info
      </div>

     <Form method="post" id="dietinfo">
     <ul class="flex-outer">
        <li>
          <label for="amountAF">Daily Intake of Food:  </label>
          <input required 
            id= "amountAF"
            aria-label="Daily Amount of Food"
            type="number"
            name="amountAF"              
            min="0"
            defaultValue={300}
          />
        </li>
        <li>
          <p>Units:</p>
            <ul class="flex-inner">
              <li>
              <input type="radio" name="unit" id="g" value="g" defaultChecked={true}/>
                <label htmlFor="g"> g </label> 
              </li>
              <li>
                <input type="radio" name="unit" id="oz" value="oz"/>
                <label htmlFor="oz"> oz </label>
              </li>
            </ul>
        </li>
      </ul>
        {/* --------------------------------- */}
      <br></br>
      Pet Food Info: Mandatory Information 

      <ul class="flex-outer">
        <li>
          <label for="kcal">Calorie (kcal/kg): </label>
            <input required 
              id="kcal"
              aria-label="The caloric density of the food"
              type="number"
              name="kcal"
              min="0"
              defaultValue={3500}/>
        </li>
        <li>
            <label for="moisture">Max Moisture (%):  </label>
            <input required 
              id="moisture"
              aria-label="Maximum amount of moisture"
              type="number"
              name="moisture"
              min="0"
              max="99"
              defaultValue={10}/>
          </li>
          <li>
            <label for="cp">Min Crude Protein (%):  </label>
            <input required 
              id="cp"
              aria-label="Minimum amount of crude protein"
              type="number"
              name="cp"
              min="0"
              max="99"
              defaultValue={18}/>
          </li>
          <li>
            <label for="tfat">Min  Crude Fat (%):  </label>
            <input required 
              id="tfat"
              aria-label="Mnimum amount of crude fat"
              type="number"
              name="tfat"
              min="0"
              max="99"
              defaultValue={10}/>
          </li>
          <li>
            <label for="fibre">Max Crude Fibre (%):  </label>
            <input required
              id="fibre" 
              aria-label="Minimum amount of crude fibre"
              type="number"
              name="fibre"
              min="0"
              max="99"
              defaultValue={15}/>
          </li>
      </ul>
      <br></br>
      Pet Food Info: Optional Information
      <ul class="flex-outer">
      <li>
    
      {rows.map((row, index) => (
        <div key={index}>
          <label htmlFor={`nutrientSelect-${index}`}>Select Nutrient</label>

          <select
            id={`nutrientSelect-${index}`}
            onChange={(event) => handleNutrientChange(index, event)}
            value={row.nutrient}
          >
            <option value="">Nutrient List</option>
            <option value="calcium" disabled={selectedNutrients.includes('calcium')}>Calcium</option>
            <option value="phosphorous" disabled={selectedNutrients.includes('phosphorous')}>Phosphorous</option>
            <option value="sodium" disabled={selectedNutrients.includes('sodium')}>Sodium</option>
          </select>

          {row.nutrient && (
            <>
              <label htmlFor={`nutrientInput-${index}`}> {row.nutrient}:</label>
              <input
                type="text"
                id={`nutrientInput-${index}`}
                value={row.value}
                onChange={(event) => handleInputChange(index, event)}
              />
            </>
          )}
          

          {rows.length > 1 && (
            <button type="button" onClick={() => removeRow(index)}>
              Remove
            </button>
          )}
        </div>
      ))}

    <button type="button" className="add-row-button" onClick={addRow}>
        +
      </button>

    </li>
    </ul>
    <ul class="flex-outer">
      <li>
        <button type="submit">Submit</button>  
      </li> 
    </ul>    

    </Form>
  </div>
  
  );

}


export {dietinfo_form_callback, P3YourFoodInfo};
